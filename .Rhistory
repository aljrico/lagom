filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=hp,
asp=1)
ggplot(mtcars, aes(factor(cyl), fill=factor(vs))) +
geom_bar() +
scale_fill_hp(discrete = TRUE, house = "Ravenclaw")
ggplot(heatmap, aes(x = X2, y = X1, fill = value)) +
geom_tile() +
scale_fill_hp() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
coord_equal()
heatmap
image(heatmap)
data(heatmap)
heatmap
name_genes <- paste(rep("GEN", 20), LETTERS[1:20], sep="_") # rows
name_patients <- paste(rep("PATIENT", 20), seq(1,20,1), sep="_") # columns
value_expression <- data.frame(genes = name_genes,
matrix(rnorm(400, 2, 1.8),nrow = 20, ncol = 20))
names(value_expression)[2:21] <- name_patients
# Melt dataframe
df_heatmap <- melt(value_expression, id.vars = "genes")
library(reshape)
library(ggplot2)
name_genes <- paste(rep("GEN", 20), LETTERS[1:20], sep="_") # rows
name_patients <- paste(rep("PATIENT", 20), seq(1,20,1), sep="_") # columns
value_expression <- data.frame(genes = name_genes,
matrix(rnorm(400, 2, 1.8),nrow = 20, ncol = 20))
names(value_expression)[2:21] <- name_patients
# Melt dataframe
df_heatmap <- melt(value_expression, id.vars = "genes")
names(df_heatmap)[2:3] <- c("patient", "expression_level")
ggplot(df_heatmap, aes(patient, genes )) +
geom_tile(aes(fill = expression_level), color = "white") +
scale_fill_hp(house = "Slytherin") +
ylab("List of genes ") +
xlab("List of patients") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 12),
plot.title = element_text(size=16),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(fill = "Expression level")
mtcars
ggplot(mpg, aes(class)) +
geom_bar(aes(weight = displ)) +
geom_bar(aes(fill = drv)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
ggplot(mpg, aes(class)) +
geom_bar(aes(weight = displ)) +
geom_bar(aes(fill = drv)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_hp() +
theme(legend.position = "top")
ggplot(mpg, aes(class)) +
geom_bar(aes(weight = displ)) +
geom_bar(aes(fill = drv)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_hp(discrete = TRUE) +
theme(legend.position = "top")
ggplot(mpg, aes(class)) +
geom_bar(aes(weight = displ)) +
geom_bar(aes(fill = drv)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_hp(discrete = TRUE, house = "Gryffindor") +
theme(legend.position = "top")
ggplot(mpg, aes(class)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_hp(discrete = TRUE, house = "Gryffindor") +
theme(legend.position = "top")
ggplot(mpg, aes(class)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_hp(discrete = TRUE, house = "Gryffindor") +
theme(legend.position = "top") +
xlab("") +
ylab("Class")
ggplot(mpg, aes(class)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_hp(discrete = TRUE, house = "Gryffindor") +
theme(legend.position = "top") +
ylab("") +
xlab("Class")
install.packages("harrypotter")
install.packages("harrypotter")
a <- data.table()
library(data.table)
library(tidyverse)
a <- data.table()
a[, col := 1:4]
a
a$col <- 1:4
x <- rnorm(1e4)
nottstrap_test(x,y)
bootstrap_test <- function(x, y, n = 1e3) {
x <- x[!is.na(x)]
y <- y[!is.na(y)]
middle <-mean(c(x, y), na.rm = TRUE)
xt <- x - mean(x, na.rm = TRUE) + middle
yt <- y - mean(y, na.rm = TRUE) + middle
non_b_statistic <- t.test(x, y)$statistic
boot_t <- c()
for (i in 1:n) {
sample_x <- sample(xt, replace = TRUE)
sample_y <- sample(yt, replace = TRUE)
boot_t[[i]] <- t.test(sample_x, sample_y)$statistic
}
result <- mean(abs(boot_t) > abs(non_b_statistic))
return(result)
}
x <- rnorm(1e3)
y <- rnorm(1e2)
bootstrap_test(x,y)
bootstrap_test <- function(x, y, n = 1e3) {
x <- x[!is.na(x)]
y <- y[!is.na(y)]
middle <-mean(c(x, y), na.rm = TRUE)
xt <- x - mean(x, na.rm = TRUE) + middle
yt <- y - mean(y, na.rm = TRUE) + middle
non_b_statistic <- t.test(x, y)$statistic
boot_t <- c()
for (i in 1:n) {
sample_x <- sample(xt, replace = TRUE)
sample_y <- sample(yt, replace = TRUE)
boot_t[[i]] <- t.test(sample_x, sample_y)$statistic
}
result <- mean(abs(boot_t) > abs(non_b_statistic))
return(result)
}
x <- rnorm(1e2)
y <- rnorm(1e2)
bootstrap_test(x,y)
x <- rnorm(1e2, 0.02)
y <- rnorm(1e2, 0.01)
bootstrap_test(x,y)
bootstrap_test <- function(x, y, n = 1e3) {
x <- x[!is.na(x)]
y <- y[!is.na(y)]
middle <-mean(c(x, y), na.rm = TRUE)
xt <- x - mean(x, na.rm = TRUE) + middle
yt <- y - mean(y, na.rm = TRUE) + middle
non_b_statistic <- t.test(x, y)$statistic
boot_t <- c()
for (i in 1:n) {
sample_x <- sample(xt, replace = TRUE)
sample_y <- sample(yt, replace = TRUE)
boot_t[[i]] <- t.test(sample_x, sample_y)$statistic
}
result <- mean(abs(boot_t) > abs(non_b_statistic))
return(result)
}
sample_size <- 1e2
x <- rnorm(sample_size/2, 0.02)
y <- rnorm(sample_size/2, 0.01)
bootstrap_test(x,y)
sample_size <- 1e5
x <- rnorm(sample_size/2, 0.02)
y <- rnorm(sample_size/2, 0.01)
bootstrap_test(x,y)
sample_size <- 2^10
sample_size <- 2^13
sample_size <- 2^20
pvalues <- c()
for(i in 1:15){
sample_size <- 2^i
x <- rnorm(sample_size/2, 0.02)
y <- rnorm(sample_size/2, 0.01)
pvalues[[i]] <- bootstrap_test(x,y)
}
pvalues <- c()
for(i in 1:15){
sample_size <- 2^(i+ 2)
x <- rnorm(sample_size/2, 0.02)
y <- rnorm(sample_size/2, 0.01)
pvalues[[i]] <- bootstrap_test(x,y)
}
pvalues
t_p[[i]] <- t.test(x,y)$pvalue
t.test(x,y)$pvalue
t.test(x,y)
t.test(x,y)[["p-value"]]
t.test(x,y)$p-value
t.test(x,y)$statistic
t.test(x,y)c
t.test(x,y)
a <- t.test(x,y)
a$p.value
t_p[[i]] <- t.test(x,y)[["p.value"]]
t.test(x,y)[["p.value"]]
b_p <- c()
t_p <- c()
for(i in 1:10){
sample_size <- 2^(i + 5)
x <- rnorm(sample_size/2, 0.02)
y <- rnorm(sample_size/2, 0.01)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
}
b_p
t_p
sample_size
b_p <- c()
t_p <- c()
for(i in 1:15){
sample_size <- 2^(i + 5)
x <- rnorm(sample_size/2, 0.02)
y <- rnorm(sample_size/2, 0.01)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
}
i
sample_size <- 2^(i + 5)
x <- rnorm(sample_size/2, 0.02)
y <- rnorm(sample_size/2, 0.01)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
ts.plot(b_p)
ts.plot(t_p)
diff(b_p,t_p)
t_p - b_p
b_p <- c()
t_p <- c()
s_size <- c()
for(i in 1:10){
sample_size <- 2^(i + 5)
s_size[[i]] <- sample_size
x <- rnorm(sample_size/2, 0.02)
y <- rnorm(sample_size/2, 0.01)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
}
tibble(b_p, t_p, sample_size = 1:length(s_size)) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_point()
library(tidyverse)
b_p <- c()
t_p <- c()
s_size <- c()
for(i in 1:10){
sample_size <- 2^(i + 5)
s_size[[i]] <- sample_size
x <- rnorm(sample_size/2, 0.02)
y <- rnorm(sample_size/2, 0.01)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
}
tibble(b_p, t_p, sample_size = 1:length(s_size)) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_point()
library(data.table)
tibble(b_p, t_p, sample_size = 1:length(s_size)) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_point()
b_p <- c()
t_p <- c()
s_size <- c()
for(i in 1:10){
sample_size <- 2^(i + 5)
s_size[[i]] <- sample_size
x <- rnorm(sample_size/2, 0.02)
y <- rnorm(sample_size/2, 0.01)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
}
tibble(b_p, t_p, sample_size = s_size) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_point()
b_p <- c()
t_p <- c()
s_size <- c()
for(i in 1:10){
sample_size <- 2^(i + 5)
s_size[[i]] <- sample_size
x <- rnorm(sample_size/2, 1, 0.25)
y <- rnorm(sample_size/2, 0.1, 0.25)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
}
tibble(b_p, t_p, sample_size = s_size) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_point()
b_p <- c()
t_p <- c()
s_size <- c()
for(i in 1:10){
sample_size <- 2^(i + 5)
s_size[[i]] <- sample_size
x <- rnorm(sample_size/2, 1, 0.5)
y <- rnorm(sample_size/2, 0.1, 0.5)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
}
tibble(b_p, t_p, sample_size = s_size) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_point()
b_p <- c()
t_p <- c()
s_size <- c()
for(i in 1:1e3){
sample_size <- i
s_size[[i]] <- sample_size
x <- rnorm(sample_size/2, 1, 0.5)
y <- rnorm(sample_size/2, 0.1, 0.5)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
}
b_p <- c()
t_p <- c()
s_size <- c()
for(i in 1:1e3){
sample_size <- i + 10
s_size[[i]] <- sample_size
x <- rnorm(sample_size/2, 1, 0.5)
y <- rnorm(sample_size/2, 0.1, 0.5)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
}
i
tibble(b_p, t_p, sample_size = s_size) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_point()
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
tibble(b_p, t_p, sample_size = s_size) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_point()
b_p <- c()
t_p <- c()
s_size <- c()
for(i in 1:1e3){
sample_size <- i + 10
s_size[[i]] <- sample_size
x <- rnorm(sample_size/2, 0.25, 0.5)
y <- rnorm(sample_size/2, 0.1, 0.5)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
}
tibble(b_p, t_p, sample_size = s_size) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_point()
x <- rnorm(sample_size/2, 0.25, 0.5)
y <- rnorm(sample_size/2, 0.1, 0.5)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
tibble(b_p, t_p, sample_size = s_size) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_point()
tibble(b_p, t_p, sample_size = s_size) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_smooth()
ts.plot(t_p - b_p)
ts.plot((t_p - b_p)/t_p)
b_p <- c()
t_p <- c()
s_size <- c()
for(i in 1:1e2){
sample_size <- i + 10
s_size[[i]] <- sample_size
x <- rnorm(sample_size/2, 0.2, 0.5)
y <- rnorm(sample_size/2, 0.1, 0.5)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
}
tibble(b_p, t_p, sample_size = s_size) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_smooth()
rgamma(sample_size/2, 0.2, 0.5)
b_p <- c()
t_p <- c()
s_size <- c()
for(i in 1:2e2){
sample_size <- i + 99
s_size[[i]] <- sample_size
x <- rgamma(sample_size/2, 0.2, 0.5)
y <- rnorm(sample_size/2, 0.1, 0.5)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
}
i
b_p <- c()
t_p <- c()
s_size <- c()
for(i in 1:2e2){
sample_size <- i + 99
s_size[[i]] <- sample_size
x <- rgamma(sample_size/2, 0.2, 0.5)
y <- rnorm(sample_size/2, 0.1, 0.5)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
print(i)
}
tibble(b_p, t_p, sample_size = s_size) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_smooth()
rbinom(sample_size/2, 0.1, 0.5)
rbeta(sample_size/2, 0.1, 0.5)
b_p <- c()
t_p <- c()
s_size <- c()
for(i in 1:2e2){
sample_size <- i + 99
s_size[[i]] <- sample_size
x <- rgamma(sample_size/2, 0.2, 0.5)
y <- rbeta(sample_size/2, 0.1, 0.5)
b_p[[i]] <- bootstrap_test(x,y)
t_p[[i]] <- t.test(x,y)[["p.value"]]
print(i)
}
tibble(b_p, t_p, sample_size = s_size) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_smooth()
hist(x)
hist(y)
tibble(b_p, t_p, sample_size = s_size) %>%
melt(id.vars = "sample_size") %>%
ggplot(aes(x = sample_size, y = value, colour = variable)) +
geom_smooth()
n <- 5
n <- 5
x <- rnorm(n)
m.x <- mean(x)
s.x <- sd(x)
z <- m.x/(1/sqrt(n))
t <- m.x/(s.x/sqrt(n))
n
x
m.x
s.x
z
t
b <- replicate(10000, mean(sample(x, replace=TRUE)))
b
x
sample(x, replace = TRUE)
sample(x, replace = TRUE)
sample(x, replace = TRUE) %>% mean()
b <- replicate(2, mean(sample(x, replace=TRUE)))
b
c( t=abs(t) > qt(0.975,n-1), z=abs(z) > qnorm(0.975),
z2 = abs(t) > qnorm(0.975),
b= (0 < quantile(b, 0.025)) | (0 > quantile(b, 0.975))
)
abs(t)
qt(0.975,n-1)
abs(t) > qnorm(0.975)
(0 < quantile(b, 0.025)) | (0 > quantile(b, 0.975)
)
qt(0.975,n-1)
n <- 5
x <- rnorm(n)
m.x <- mean(x)
s.x <- sd(x)
z <- m.x/(1/sqrt(n))
t <- m.x/(s.x/sqrt(n))
b <- replicate(10000, mean(sample(x, replace=TRUE)))
c( t=abs(t) > qt(0.975,n-1), z=abs(z) > qnorm(0.975),
z2 = abs(t) > qnorm(0.975),
b= (0 < quantile(b, 0.025)) | (0 > quantile(b, 0.975))
)
simfun <- function(n=5) {
x <- rnorm(n)
m.x <- mean(x)
s.x <- sd(x)
z <- m.x/(1/sqrt(n))
t <- m.x/(s.x/sqrt(n))
b <- replicate(10000, mean(sample(x, replace=TRUE)))
c( t=abs(t) > qt(0.975,n-1), z=abs(z) > qnorm(0.975),
z2 = abs(t) > qnorm(0.975),
b= (0 < quantile(b, 0.025)) | (0 > quantile(b, 0.975))
)
}
out <- replicate(10000, simfun())
out
out <- replicate(1e2, simfun())
rowMeans(out)
simfun <- function(n=500) {
x <- rnorm(n)
m.x <- mean(x)
s.x <- sd(x)
z <- m.x/(1/sqrt(n))
t <- m.x/(s.x/sqrt(n))
b <- replicate(10000, mean(sample(x, replace=TRUE)))
c( t=abs(t) > qt(0.975,n-1), z=abs(z) > qnorm(0.975),
z2 = abs(t) > qnorm(0.975),
b= (0 < quantile(b, 0.025)) | (0 > quantile(b, 0.975))
)
}
out <- replicate(1e2, simfun())
rowMeans(out)
