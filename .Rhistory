con <- fread('dataset2.csv')
glimpse(sit)
glimpse(dem)
glimpse(con)
con
library(data.table)
library(tidyverse)
sit <- fread('dataset1.csv')
dem <- fread('dataset1.csv')
con <- fread('dataset2.csv')
glimpse(sit)
glimpse(dem)
glimpse(con)
colnames(con[,"Patient_ID"]) <- "ID_Patient"
library(data.table)
library(tidyverse)
sit <- fread('dataset1.csv')
dem <- fread('dataset1.csv')
con <- fread('dataset2.csv')
glimpse(sit)
glimpse(dem)
glimpse(con)
colnames(con[,"Patient_ID"]) <- "ID_Patient"
con
con
colnames(con)[1] <- "ID_Patient"
con
con[con[, "Patient_ID"] == 3239,]
con[con[, "ID_Patient"] == 3239,]
con[con[, "ID_Patient"] == 3239,]
library(data.table)
library(tidyverse)
sit <- as_tibble(fread('dataset1.csv'))
dem <- as_tibble(fread('dataset1.csv'))
con <- as_tibble(fread('dataset2.csv'))
glimpse(sit)
glimpse(dem)
glimpse(con)
con[con[, "ID_Patient"] == 3239,]
colnames(con)[1] <- "ID_Patient"
con
con[con[, "ID_Patient"] == 3239,]
con[sim[, "ID_Patient"] == 3239,]
sim[sim[, "ID_Patient"] == 3239,]
sit[sit[, "ID_Patient"] == 3239,]
dem[dem[, "ID_Patient"] == 3239,]
library(data.table)
library(tidyverse)
sit <- as_tibble(fread('dataset1.csv'))
dem <- as_tibble(fread('dataset2.csv'))
con <- as_tibble(fread('dataset3.csv'))
glimpse(sit)
glimpse(dem)
glimpse(con)
colnames(sit)[1] <- "ID_Patient"
sit
colnames(sit)[1] <- "Patient_ID"
sit
colnames(sit)[3] <- "Patient_ID"
sit
library(data.table)
library(tidyverse)
sit <- as_tibble(fread('dataset1.csv'))
dem <- as_tibble(fread('dataset2.csv'))
con <- as_tibble(fread('dataset3.csv'))
glimpse(sit)
glimpse(dem)
glimpse(con)
colnames(sit)[3] <- "Patient_ID"
sit
colnames(sit)[3] <- "Patient_ID"
sit
con[con[, "Patient_ID"] == 3239,]
con[con[, "Patient_ID"] == 3239,]
con
sit
dem
sit
con
unique(unique(sit[,3]) %in% unique(con[,1]))
unique(unique(sit[,3]) %in% unique(dem[,1]))
unique(unique(con[,1]) %in% unique(sit[,3]))
unique(unique(sit[,'Patient_ID']) %in% unique(con[,1]))
unique(sit[,'Patient_ID']) %in% unique(con[,'Patient_ID'])
unique(unique(sit[,3]) %in% unique(dem[,1]))
unique(unique(con[,1]) %in% unique(sit[,3]))
unique(sit[,'Patient_ID'])
unique(unique(con[,1]) %in% unique(dem[,1]))
length(dem[,1]) - length(unique(dem[,1]))
length(sit[,3]) - length(unique(sit[,3]))
length(con[,1]) - length(unique(con[,1]))
unique(unique(con[,1]) %in% unique(dem[,1]))
length(unique(sit[,3]))
length(unique(dem[,1]))
length(unique(con[,1]))
sit
sit[,"Patient_ID"]
unique(sit[,"Patient_ID"])
unique(sit[,"Patient_ID"]) %in% unique(con[,'Patient_ID'])
unique(sit[,"Patient_ID"]) %in% unique(sit[,'Patient_ID'])
unique(con[,'Patient_ID']) %in% unique(sit[,'Patient_ID'])
length(unique(sit[,"Patient_ID"]))
nrow(unique(sit[,"Patient_ID"]))
nrow(unique(cond[,"Patient_ID"]))
nrow(unique(con[,"Patient_ID"]))
library(data.table)
library(tidyverse)
sit <- as.data.frame(fread('dataset1.csv'))
dem <- as.data.frame(fread('dataset2.csv'))
con <- as.data.frame(fread('dataset3.csv'))
sit
dem
con
glimpse(sit)
glimpse(dem)
glimpse(con)
colnames(sit)[3] <- "Patient_ID"
sit
unique(sit[,'Patient_ID']) %in% unique(con[,'Patient_ID'])
any(unique(sit[,'Patient_ID']) %in% unique(con[,'Patient_ID']))
any(unique(sit[,'Patient_ID']) %in% unique(con[,'Patient_ID']))
any(unique(sit[,'Patient_ID']) %in% unique(dem[,'Patient_ID']))
any(unique(con[,'Patient_ID']) %in% unique(dem[,'Patient_ID']))
any(unique(sit[,'Patient_ID']) !%in% unique(con[,'Patient_ID']))
all(unique(sit[,'Patient_ID']) %in% unique(con[,'Patient_ID']))
all(unique(sit[,'Patient_ID']) %in% unique(dem[,'Patient_ID']))
all(unique(con[,'Patient_ID']) %in% unique(dem[,'Patient_ID']))
all(unique(con[,'Patient_ID']) %in% unique(sit[,'Patient_ID']))
all(unique(sit[,'Patient_ID']) %in% unique(con[,'Patient_ID']))
all(unique(sit[,'Patient_ID']) %in% unique(dem[,'Patient_ID']))
all(unique(con[,'Patient_ID']) %in% unique(sit[,'Patient_ID']))
all(unique(sit[,'Patient_ID']) %in% unique(con[,'Patient_ID']))
all(unique(sit[,'Patient_ID']) %in% unique(dem[,'Patient_ID']))
all(unique(con[,'Patient_ID']) %in% unique(sit[,'Patient_ID']))
all(unique(con[,'Patient_ID']) %in% unique(dem[,'Patient_ID']))
all(unique(sit[,'Patient_ID']) %in% unique(con[,'Patient_ID']))
all(unique(sit[,'Patient_ID']) %in% unique(dem[,'Patient_ID']))
all(unique(con[,'Patient_ID']) %in% unique(dem[,'Patient_ID']))
sit
sit$`Train/ Test/ Score`
sit[,sit$`Train/ Test/ Score` == 'Score']
sit[,sit$`Train/ Test/ Score` == "Score"]
sit[,`Train/ Test/ Score` == "Score"]
sit[,"Train/ Test/ Score" == "Score"]
sit[,"Train/ Test/ Score" != "Test"]
sit[,"Train/ Test/ Score" != "Train"]
all(unique(sit[,'Patient_ID']) %in% unique(con[,'Patient_ID']))
all(unique(con[,'Patient_ID']) %in% unique(sit[,'Patient_ID']))
all(unique(sit[,'Patient_ID']) %in% unique(dem[,'Patient_ID']))
all(unique(con[,'Patient_ID']) %in% unique(dem[,'Patient_ID']))
duplicated(sit)
duplicated(sit$Patient_ID)
sit[,duplicated(sit$Patient_ID)]
sit %>%
filter(duplicated(Patient_ID))
sit %>%
filter(duplicated(Patient_ID))
sit %>%
filter(duplicated(Patient_ID)) %>%
arrange(Patient_ID)
sit %>%
group_by(Patient_ID) %>%
filter(n()>1)
sit %>%
group_by(Patient_ID) %>%
filter(n()>1) %>%
arrange(Patient_ID)
sit %>%
filter(Survived_1_year == 0)
sit %>%
filter(Survived_1_year == 0) %>%
group_by(Patient_ID) %>%
filter(n()>1) %>%
arrange(Patient_ID)
sit %>%
filter(Survived_1_year == 1) %>%
group_by(Patient_ID) %>%
filter(n()>1) %>%
arrange(Patient_ID)
sit %>%
filter(Survived_1_year == 0) %>%
group_by(Patient_ID) %>%
filter(n()>1) %>%
arrange(Patient_ID)
nrow(sit)
sit %>%
filter(Survived_1_year ==1) %>%
group_by(Patient_ID) %>%
filter(n()>1) %>%
arrange(Patient_ID)
sit %>%
filter(Survived_1_year ==0) %>%
group_by(Patient_ID) %>%
filter(n()>1) %>%
arrange(Patient_ID)
duplicated(sit)
any(duplicated(sit))
sit %>%
filter(Survived_1_year ==0) %>%
group_by(Patient_ID) %>%
filter(n()>1) %>%
arrange(Patient_ID)
any(duplicated(sit))
any(duplicated(con))
any(duplicated(dem))
any(is.na(sit))
any(is.na(con))
any(is.na(dem))
any(is.na(sit))
any(is.na(con))
any(is.na(dem))
setwd("~/Code/R/blog/_posts/rmarkdown")
library(data.table)
tourn.data   <- fread("/data/tourn.csv")
knit_with_parameters('~/Code/R/blog/_posts/rmarkdown/genetic-algorithms.Rmd')
devtools::install_github("metacran/cranlogs")
cran_downloads(packages = "harrypotter")
library(cranlogs)
cran_downloads(packages = "harrypotter")
cran_downloads(packages = "harrypotter", whehn = "last-year")
cran_downloads(packages = "harrypotter", when = "last-year")
cran_downloads(packages = "harrypotter", when = "last-month")
cran_downloads(packages = "harrypotter", from = "2015-01-01", to = "2018-12-12")
cran_downloads(packages = "harrypotter", from = "2018-01-01", to = "2018-12-12")
cran_downloads(packages = "harrypotter", from = "2018-09-01", to = "2018-12-12")
cran_downloads(packages = "harrypotter", from = "2018-09-01", to = "2018-12-01")
cran_downloads(packages = "harrypotter", from = "2018-09-01", to = "2018-12-01") %>% plot()
library(tidyverse)
cran_downloads(packages = "harrypotter", from = "2018-09-01", to = "2018-12-01") %>% qplot()
cran_downloads(packages = "harrypotter", from = "2018-09-01", to = "2018-12-01") %>% .$count %>% qplot()
cran_downloads(packages = "harrypotter", from = "2018-09-01", to = "2018-12-01") %>% .$count %>% plot()
cran_downloads(packages = "harrypotter", from = "2018-09-01", to = "2018-12-01") %>% ggplot(aes(x = date, y = count)) + geom_point()
cran_downloads(packages = "harrypotter", from = "2018-09-01", to = "2018-12-01")
cran_top_downloads("last_week")
cran_top_downloads("last-week")
cran_top_downloads("last-month")
install.packages("harrypotter")
rnorm(100) %>% plot()
rnorm(100) %>% plot(col = hp(1))
library(harrypotter)
rnorm(100) %>% plot(col = hp(1))
rnorm(100) %>% plot(fill = hp(1))
rnorm(100) %>% ts.plot(col = hp(1))
rnorm(100) %>% plot(col = hp(1))
image(volcano)
image(volcano, col = hp())
image(volcano, col = hp
)
image(volcano, col = hp(10))
image(volcano, col = hp(1000))
image(volcano, col = hp(1e6))
image(volcano, col = hp(1e4))
image(volcano, col = hp(1e2))
image(volcano, col = hp(1e1))
image(volcano, col = hp(2e1))
pal <- hp(25, house = "Gryffindor")
pal <- hp(25, house = "Gryffindor")
image(volcano, col = pal)
image(volcano, col = pal)
pal <- hp(25, house = "Slytherin")
image(volcano, col = pal)
pal <- hp(20, house = "Slytherin")
image(volcano, col = pal)
pal <- hp(25, house = "Slytherin")
image(volcano, col = pal)
pal <- hp(25, house = "Ravenclaw")
image(volcano, col = pal)
pal <- hp(25, house = "Ravenclaw")
image(volcano, col = pal)
image(x = mtcars)
pal_gryff <- hp(25, house = "Gryffindor")
pal_rav   <- hp(25, house = "Ravenclaw")
pal_huff  <- hp(25, house = "Hufflepuff")
pal_sly   <- hp(25, house = "Slytherin")
par(mfrow = c(2,2))
image(volcano, col = pal_gryff)
image(volcano, col = pal_rav)
image(volcano, col = pal_huff)
image(volcano, col = pal_sly)
library(ggplot2)
ggplot(data.frame(x = rnorm(10000), y = rnorm(10000)), aes(x = x, y = y)) +
geom_hex() + coord_fixed() +
scale_fill_hp(house = "hufflepuff") + theme_bw()
library(ggplot2)
ggplot(data.frame(x = rnorm(10000), y = rnorm(10000)), aes(x = x, y = y)) +
geom_hex() + coord_fixed() +
scale_fill_hp(house = "slytherin") + theme_bw()
library(ggplot2)
ggplot(data.frame(x = rnorm(1e4), y = rnorm(1e4)), aes(x = x, y = y)) +
geom_hex() +
coord_fixed() +
scale_fill_hp(house = "slytherin") +
theme_minimal()
pal_gryff <- hp(25, house = "Gryffindor")
pal_rav   <- hp(25, house = "Ravenclaw")
pal_huff  <- hp(25, house = "Hufflepuff")
pal_sly   <- hp(25, house = "Slytherin")
par(mfrow = c(2,2))
image(volcano, col = pal_gryff)
image(volcano, col = pal_rav)
image(volcano, col = pal_huff)
image(volcano, col = pal_sly)
library(ggplot2)
ggplot(data.frame(x = rnorm(1e4), y = rnorm(1e4)), aes(x = x, y = y)) +
geom_hex() +
coord_fixed() +
scale_fill_hp(house = "ravenclaw") +
theme_bw()
source('~/Downloads/Solving for P(0).R', echo=TRUE)
install.packages("rootSolve")
source('~/Downloads/Solving for P(0).R', echo=TRUE)
library(rootSolve)
Y_0 <- 10000;
G_U <- 17000;
G_L <- 16000;
mu <- 0.05;
sigma <- 0.16;
gamma <- 9.77*10^-5;
# gamma <- 2;
theta <- mu/sigma;
R <- theta/gamma;
R
T <- 30;
fun <- function (x)  {
G_U-Y_0
-((G_U-x)/(2*R*sqrt(T)))*(erf((G_U-x)/(R*sqrt(2*T)))+1)
+((G_L-x)/(2*R*sqrt(T)))*(erf((G_L-x)/(R*sqrt(2*T)))+1)
-R*sqrt(T)/(sqrt(2*pi))*(exp(-((G_L-x)^2)/(2*T*R^2))-exp(-((G_U-x)^2)/(2*T*R^2)))
}
uni <- uniroot(fun, interval = c(0,20000))$root
uni <- uniroot(fun, interval = c(0,20000))$root
library(pracma)
install.packages("pracma")
library(pracma)
fun <- function (x)  {
G_U-Y_0
-((G_U-x)/(2*R*sqrt(T)))*(erf((G_U-x)/(R*sqrt(2*T)))+1)
+((G_L-x)/(2*R*sqrt(T)))*(erf((G_L-x)/(R*sqrt(2*T)))+1)
-R*sqrt(T)/(sqrt(2*pi))*(exp(-((G_L-x)^2)/(2*T*R^2))-exp(-((G_U-x)^2)/(2*T*R^2)))
}
uni <- uniroot(fun, interval = c(0,20000))$root
uni
T <- 4;
fun <- function (x)  {
G_U-Y_0
-((G_U-x)/(2*R*sqrt(T)))*(erf((G_U-x)/(R*sqrt(2*T)))+1)
+((G_L-x)/(2*R*sqrt(T)))*(erf((G_L-x)/(R*sqrt(2*T)))+1)
-R*sqrt(T)/(sqrt(2*pi))*(exp(-((G_L-x)^2)/(2*T*R^2))-exp(-((G_U-x)^2)/(2*T*R^2)))
}
uni <- uniroot(fun, interval = c(0,20000))$root
# uni <- multiroot(fun, start=(G_L+G_U)/2)$root
uni
curve(fun(x), 8000, 20000)
abline(h=0, lty=3)
points(uni, 0, pch = 16, cex = 2)
curve(fun(x), G_L, G_U)
curve(fun(x), 0, 20000)
abline(h=0, lty=3)
points(uni, 0, pch = 16, cex = 2)
curve(fun(x), -1000, 20000)
curve(fun(x), -10000, 20000)
abline(h=0, lty=3)
points(uni, 0, pch = 16, cex = 2)
T <- 1;
fun <- function (x)  {
G_U-Y_0
-((G_U-x)/(2*R*sqrt(T)))*(erf((G_U-x)/(R*sqrt(2*T)))+1)
+((G_L-x)/(2*R*sqrt(T)))*(erf((G_L-x)/(R*sqrt(2*T)))+1)
-R*sqrt(T)/(sqrt(2*pi))*(exp(-((G_L-x)^2)/(2*T*R^2))-exp(-((G_U-x)^2)/(2*T*R^2)))
}
uni <- uniroot(fun, interval = c(0,20000))$root
# uni <- multiroot(fun, start=(G_L+G_U)/2)$root
uni
curve(fun(x), -10000, 20000)
abline(h=0, lty=3)
points(uni, 0, pch = 16, cex = 2)
gamma <- 2;
theta <- mu/sigma;
R <- theta/gamma;
R
T <- 1;
fun <- function (x)  {
G_U-Y_0
-((G_U-x)/(2*R*sqrt(T)))*(erf((G_U-x)/(R*sqrt(2*T)))+1)
+((G_L-x)/(2*R*sqrt(T)))*(erf((G_L-x)/(R*sqrt(2*T)))+1)
-R*sqrt(T)/(sqrt(2*pi))*(exp(-((G_L-x)^2)/(2*T*R^2))-exp(-((G_U-x)^2)/(2*T*R^2)))
}
uni <- uniroot(fun, interval = c(0,20000))$root
# uni <- multiroot(fun, start=(G_L+G_U)/2)$root
uni
curve(fun(x), -10000, 20000)
abline(h=0, lty=3)
points(uni, 0, pch = 16, cex = 2)
gamma <- 2;
theta <- mu/sigma;
R <- theta/gamma;
R
T <- 30;
fun <- function (x)  {
G_U-Y_0
-((G_U-x)/(2*R*sqrt(T)))*(erf((G_U-x)/(R*sqrt(2*T)))+1)
+((G_L-x)/(2*R*sqrt(T)))*(erf((G_L-x)/(R*sqrt(2*T)))+1)
-R*sqrt(T)/(sqrt(2*pi))*(exp(-((G_L-x)^2)/(2*T*R^2))-exp(-((G_U-x)^2)/(2*T*R^2)))
}
uni <- uniroot(fun, interval = c(0,20000))$root
# uni <- multiroot(fun, start=(G_L+G_U)/2)$root
uni
curve(fun(x), -10000, 20000)
abline(h=0, lty=3)
points(uni, 0, pch = 16, cex = 2)
library("ggplot2")
ggplot(mtcars, aes(factor(cyl), fill=factor(vs))) +  geom_bar() +
scale_fill_manual(values = wes_palette("Royal1"))
library("ggplot2")
ggplot(mtcars, aes(factor(cyl), fill=factor(vs))) +  geom_bar() +
scale_fill_hp(discrete = TRUE)
x <- y <- seq(-8*pi, 8*pi, len = 40)
r <- sqrt(outer(x^2, y^2, "+"))
filled.contour(cos(r^2)*exp(-r/(2*pi)),
axes=FALSE,
color.palette=hp,
asp=1)
ggplot(mtcars, aes(factor(cyl), fill=factor(vs))) +
geom_bar() +
scale_fill_hp(discrete = TRUE, house = "Ravenclaw")
ggplot(heatmap, aes(x = X2, y = X1, fill = value)) +
geom_tile() +
scale_fill_hp() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
coord_equal()
heatmap
image(heatmap)
data(heatmap)
heatmap
name_genes <- paste(rep("GEN", 20), LETTERS[1:20], sep="_") # rows
name_patients <- paste(rep("PATIENT", 20), seq(1,20,1), sep="_") # columns
value_expression <- data.frame(genes = name_genes,
matrix(rnorm(400, 2, 1.8),nrow = 20, ncol = 20))
names(value_expression)[2:21] <- name_patients
# Melt dataframe
df_heatmap <- melt(value_expression, id.vars = "genes")
library(reshape)
library(ggplot2)
name_genes <- paste(rep("GEN", 20), LETTERS[1:20], sep="_") # rows
name_patients <- paste(rep("PATIENT", 20), seq(1,20,1), sep="_") # columns
value_expression <- data.frame(genes = name_genes,
matrix(rnorm(400, 2, 1.8),nrow = 20, ncol = 20))
names(value_expression)[2:21] <- name_patients
# Melt dataframe
df_heatmap <- melt(value_expression, id.vars = "genes")
names(df_heatmap)[2:3] <- c("patient", "expression_level")
ggplot(df_heatmap, aes(patient, genes )) +
geom_tile(aes(fill = expression_level), color = "white") +
scale_fill_hp(house = "Slytherin") +
ylab("List of genes ") +
xlab("List of patients") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 12),
plot.title = element_text(size=16),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(fill = "Expression level")
mtcars
ggplot(mpg, aes(class)) +
geom_bar(aes(weight = displ)) +
geom_bar(aes(fill = drv)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
ggplot(mpg, aes(class)) +
geom_bar(aes(weight = displ)) +
geom_bar(aes(fill = drv)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_hp() +
theme(legend.position = "top")
ggplot(mpg, aes(class)) +
geom_bar(aes(weight = displ)) +
geom_bar(aes(fill = drv)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_hp(discrete = TRUE) +
theme(legend.position = "top")
ggplot(mpg, aes(class)) +
geom_bar(aes(weight = displ)) +
geom_bar(aes(fill = drv)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_hp(discrete = TRUE, house = "Gryffindor") +
theme(legend.position = "top")
ggplot(mpg, aes(class)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_hp(discrete = TRUE, house = "Gryffindor") +
theme(legend.position = "top")
ggplot(mpg, aes(class)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_hp(discrete = TRUE, house = "Gryffindor") +
theme(legend.position = "top") +
xlab("") +
ylab("Class")
ggplot(mpg, aes(class)) +
geom_bar(aes(fill = drv), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_hp(discrete = TRUE, house = "Gryffindor") +
theme(legend.position = "top") +
ylab("") +
xlab("Class")
install.packages("harrypotter")
install.packages("harrypotter")
